<style>
  
  * {
    box-sizing: border-box;
  }

  body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
  }

  .container {
    max-width: 800px;
    margin: 50px auto;
    padding: 30px;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  h2 {
    text-align: center;
    margin-bottom: 20px;
    color: #333;
  }

  .form-group {
    margin-bottom: 30px;
  }

  label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #333;
  }

  input[type="text"],
  input[type="number"],
  textarea,
  select {
    width: 100%;
    padding: 12px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
  }

  textarea {
    resize: none;
  }

  .stock-control {
    display: flex;
    align-items: center;
  }

  .stock-control button {
    width: 30px;
    height: 30px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  .stock-control button:hover {
    background-color: #0056b3;
  }

  input#stock {
    width: 60px;
    text-align: center;
    margin: 0 10px;
  }

  .available-group {
    display: flex;
    align-items: center;
  }

  .available-box {
    width: 20px;
    height: 20px;
    border: 2px solid #007bff;
    border-radius: 3px;
    margin-left: 10px;
    cursor: pointer;
    position: relative;
  }

  .available-box::after {
    content: "";
    width: 10px;
    height: 10px;
    background-color: #007bff;
    position: absolute;
    top: 3px;
    left: 3px;
    display: none;
  }

  input[type="checkbox"]:checked+.available-box::after {
    display: block;
  }

  input[type="file"] {
    padding: 5px;
  }

  .small-save-btn,
  .small-back-btn {
    width: 100px;
    padding: 8px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    margin-right: 10px;
  }

  .small-save-btn:hover,
  .small-back-btn:hover {
    background-color: #0056b3;
  }

  .small-back-btn {
    background-color: #6c757d;
  }

  .small-back-btn:hover {
    background-color: #565e64;
  }

  .button-group {
    text-align: center;
  }

  /* Modal Styles */
  #cropModal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1000;
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  }

  .modal-content img {
    max-width: 50%;
  }

  .modal-content button {
    margin-top: 10px;
    padding: 10px 15px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  .modal-content button:hover {
    background-color: #0056b3;
  }
</style>
</head>

<body>
  <div class="container">
    <h2>Add Product</h2>
    <form id="addProductForm" action="/admin/addProduct" method="post" enctype="multipart/form-data"
      onsubmit="return validateForm()">
      <div class="form-group">
        <label for="productName">Product Name</label>
        <input type="text" id="productName" name="productName" >
      </div>
      <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description" name="description" rows="4" ></textarea>
      </div>

      <div class="form-group">
        <label for="price">Price</label>
        <input type="number" id="price" name="price" >
      </div>

      <div class="form-group">
        <label for="color">color</label>
        <input type="text" id="color" name="color" >
      </div>


      <div class="form-group stock-group">
        <label for="stock">Stock</label>
        <div class="stock-control">
          <input type="number" id="stock" name="stock" min="0" value="0" >
        </div>
      </div>


      <!-- Image input fields with individual save buttons -->
      <!-- Add placeholders to display cropped images -->
      <div class="form-group">
        <label for="image1">Product Image 1</label>
        <input type="file" id="image1" name="image1" accept="image/png, image/jpeg, image/jpg"
          onchange="viewImage(event, 1)" >
        <img id="imgView1" src="#" alt="Cropped Image 1" style="display:none; max-width: 100%; margin-top: 10px;">
        <button type="button" class="small-save-btn">Save</button>
      </div>

      <div class="form-group">
        <label for="image2">Product Image 2</label>
        <input type="file" id="image2" name="image2" accept="image/*" onchange="viewImage(event , 2)">
        <img id="imgView2" src="#" alt="Cropped Image 2" style="display:none; max-width: 100%; margin-top: 10px;">
        <button type="button" class="small-save-btn">Save</button>
      </div>

      <div class="form-group">
        <label for="image3">Product Image 3</label>
        <input type="file" id="image3" name="image3" accept="image/*" onchange="viewImage(event , 3)">
        <img id="imgView3" src="#" alt="Cropped Image 3" style="display:none; max-width: 100%; margin-top: 10px;">
        <button type="button" class="small-save-btn">Save</button>
      </div>

      <div class="form-group">
        <label for="brand">Brand</label>
        <select id="brand" name="brand" >
          <%for(let i=0; i<brands.length; i++){%>
            <% if(brands[i].isListed){ %>
              <option value="<%=brands[i]._id%>">
                <%=brands[i].name%>
              </option>

              <%}%>
                <%}%>
        </select>
      </div>

      <div class="form-group">
        <label for="type">Type</label>
        <select id="type" name="type" >
          <%for(let i=0; i<types.length; i++){%>
            <% if(types[i].isListed){ %>
              <option id="types" value="<%=types[i]._id%>">
                <%=types[i].name%>
              </option>
              <%}%>
                <%}%>
        </select>
      </div>

      <!-- Save and Back buttons -->
      <div class="form-group button-group">
        <button type="submit" class="small-save-btn">Save</button>
        <a href="/admin/product">
          <button type="button" class="small-back-btn">Back</button>
        </a>
      </div>
      <div id="errorMessages" style="color: red;"></div>
    </form>
  </div>

  <!-- Modal for cropping image -->
  <div id="cropModal">
    <div class="modal-content">
      <img id="imageToCrop" src="" alt="Image for cropping">
      <button type="button" id="cropBtn">Crop Image</button>
    </div>
  </div>


  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

  <script>
    let cropper;
    let currentImageNumber;

    function viewImage(event, imageNumber) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          const image = document.getElementById('imageToCrop');
          image.src = e.target.result;

          // Initialize Cropper.js
          if (cropper) {
            cropper.destroy();
          }
          cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
          });

          currentImageNumber = imageNumber;

          document.getElementById('cropModal').style.display = 'block';
        };
        reader.readAsDataURL(file);
      }
    }
    document.getElementById('cropBtn').addEventListener('click', function () {
      if (cropper) {
        const canvas = cropper.getCroppedCanvas();
        canvas.toBlob(function (blob) {
          const croppedImageUrl = URL.createObjectURL(blob);
          const imgView = document.getElementById('imgView' + currentImageNumber);
          imgView.src = croppedImageUrl;
          imgView.style.display = 'block';

          // Hide the modal
          document.getElementById('cropModal').style.display = 'none';

          cropper.destroy();
        });
      }
    });



function validateForm() {
    const form = document.getElementById('addProductForm');
    const errorMessages = document.getElementById('errorMessages');
    errorMessages.innerHTML = ''; // Clear any previous error messages

    const productName = document.getElementById('productName').value;
    const description = document.getElementById('description').value;
    const price = document.getElementById('price').value;
    const stock = document.getElementById('stock').value;
    const color = document.getElementById('color').value;
    const brand = document.getElementById('brand').value;
    const type = document.getElementById('type').value;

    let errors = [];

    // Basic client-side validation
    if (!productName) errors.push("Product name is required.");
    if (!description) errors.push("Description is required.");
    if (!price || price <= 0) errors.push("Price must be greater than 0.");
    if (!stock || stock <= 0) errors.push("Stock must be greater than 0.");
    if (!brand) errors.push("Brand must be selected.");
    if (!type) errors.push("Type must be selected.");
    if (!color) errors.push("Color is required.");

    if (errors.length > 0) {
        // Show errors to the user
        errors.forEach(function(error) {
            const errorDiv = document.createElement('div');
            errorDiv.textContent = error;
            errorMessages.appendChild(errorDiv);
        });
        return false; // Prevent form submission if errors exist
    }

    // If no client-side errors, allow the form to submit
    return true;
}


    // Function to send form data via AJAX
    function sendFormData(formData) {
      fetch('/admin/addProduct', {
        method: 'POST',
        body: formData,
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            swal({
              title: `${errorText}`,
              text: "Product added successfully!!!",
              icon: "warning",
              button: "back",
              });
          } else {
            swal({
              title: `${errorText}`,
              text: "Failed to add product.",
              icon: "warning",
              button: "back",
              });
          }
        })
        .catch(error => {
          console.error('Error:', error);
          swal({
              title: `${errorText}`,
              text: "Error adding product.",
              icon: "warning",
              button: "back",
              });
        });
    }
    

 
  </script>
   <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>